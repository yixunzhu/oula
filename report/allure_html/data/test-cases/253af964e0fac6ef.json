{
  "uid" : "253af964e0fac6ef",
  "name" : "test_003_only_apply_one_permission",
  "fullName" : "testcases.高危命令.pg.test_004_table_group_pg#test_003_only_apply_one_permission",
  "historyId" : "72c374e1ae98df1c156110f3e7d94f30",
  "time" : {
    "start" : 1700200893080,
    "stop" : 1700200893156,
    "duration" : 76
  },
  "description" : "\n    # 用例：\n    # 1、只自定义数据源连接 - 高危（insert）\n    # 2、普通用户执行insert报高危提示，但是执行：updata, delete, creat_table）不会报高危提示\n    # 清除环境，没有添加任何高危权限设置时，执行对应权限SQL语句，可以执行，不会有高危提示\n    :return:\n    ",
  "descriptionHtml" : "<pre><code># 用例：\n# 1、只自定义数据源连接 - 高危（insert）\n# 2、普通用户执行insert报高危提示，但是执行：updata, delete, creat_table）不会报高危提示\n# 清除环境，没有添加任何高危权限设置时，执行对应权限SQL语句，可以执行，不会有高危提示\n:return:\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "TypeError: 'bool' object is not subscriptable",
  "statusTrace" : "def test_003_only_apply_one_permission():\n        \"\"\"\n        # 用例：\n        # 1、只自定义数据源连接 - 高危（insert）\n        # 2、普通用户执行insert报高危提示，但是执行：updata, delete, creat_table）不会报高危提示\n        # 清除环境，没有添加任何高危权限设置时，执行对应权限SQL语句，可以执行，不会有高危提示\n        :return:\n        \"\"\"\n        _sql_list = list(oracle_connection_sql.values())\n>       high_risk_resources.delete_all_high_risk_source_permission(_connection)\n\ntestcases\\高危命令\\pg\\test_004_table_group_pg.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntins\\api\\db_manage\\access_set\\high_risk_resources.py:157: in delete_all_high_risk_source_permission\n    _permission_ids = db_manage_public.get_permission_ids(connection_name, _perm_type)\ntins\\api\\db_manage\\db_manage_public.py:104: in get_permission_ids\n    res = get_permission_info(connection_name, _perm_type)\ntins\\api\\db_manage\\db_manage_public.py:29: in get_permission_info\n    connection_id = get_connection_id(connection_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nconnection_name = 'xyz_test6666_PostgreSQL'\n\n    def get_connection_id(connection_name):\n        \"\"\"\n        通过连接名称获取connection_id\n        :param connection_name:\n        :return:\n        \"\"\"\n        _info = get_info()\n>       connection_id = jsonpath.jsonpath(_info, \"$.data.data[?(@.nodeName=='{}')].connectionId\".format(connection_name))[0]\nE       TypeError: 'bool' object is not subscriptable\n\ntins\\api\\public.py:317: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "\n    # 用例：\n    # 1、只自定义数据源连接 - 高危（insert）\n    # 2、普通用户执行insert报高危提示，但是执行：updata, delete, creat_table）不会报高危提示\n    # 清除环境，没有添加任何高危权限设置时，执行对应权限SQL语句，可以执行，不会有高危提示\n    :return:\n    ",
    "status" : "broken",
    "statusMessage" : "TypeError: 'bool' object is not subscriptable",
    "statusTrace" : "def test_003_only_apply_one_permission():\n        \"\"\"\n        # 用例：\n        # 1、只自定义数据源连接 - 高危（insert）\n        # 2、普通用户执行insert报高危提示，但是执行：updata, delete, creat_table）不会报高危提示\n        # 清除环境，没有添加任何高危权限设置时，执行对应权限SQL语句，可以执行，不会有高危提示\n        :return:\n        \"\"\"\n        _sql_list = list(oracle_connection_sql.values())\n>       high_risk_resources.delete_all_high_risk_source_permission(_connection)\n\ntestcases\\高危命令\\pg\\test_004_table_group_pg.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntins\\api\\db_manage\\access_set\\high_risk_resources.py:157: in delete_all_high_risk_source_permission\n    _permission_ids = db_manage_public.get_permission_ids(connection_name, _perm_type)\ntins\\api\\db_manage\\db_manage_public.py:104: in get_permission_ids\n    res = get_permission_info(connection_name, _perm_type)\ntins\\api\\db_manage\\db_manage_public.py:29: in get_permission_info\n    connection_id = get_connection_id(connection_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nconnection_name = 'xyz_test6666_PostgreSQL'\n\n    def get_connection_id(connection_name):\n        \"\"\"\n        通过连接名称获取connection_id\n        :param connection_name:\n        :return:\n        \"\"\"\n        _info = get_info()\n>       connection_id = jsonpath.jsonpath(_info, \"$.data.data[?(@.nodeName=='{}')].connectionId\".format(connection_name))[0]\nE       TypeError: 'bool' object is not subscriptable\n\ntins\\api\\public.py:317: TypeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "4270abb8b321fb20",
      "name" : "log",
      "source" : "4270abb8b321fb20.txt",
      "type" : "text/plain",
      "size" : 907
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "testcases.高危命令.pg"
  }, {
    "name" : "suite",
    "value" : "test_004_table_group_pg"
  }, {
    "name" : "host",
    "value" : "LAPTOP-BQ91TRPV"
  }, {
    "name" : "thread",
    "value" : "27328-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcases.高危命令.pg.test_004_table_group_pg"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "253af964e0fac6ef.json",
  "parameterValues" : [ ]
}