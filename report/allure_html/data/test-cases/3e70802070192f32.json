{
  "uid" : "3e70802070192f32",
  "name" : "test_001_connection",
  "fullName" : "testcases.高危命令.pg.test_001_connection_pg#test_001_connection",
  "historyId" : "f50f22d78551586073351a62d9162375",
  "time" : {
    "start" : 1700200892055,
    "stop" : 1700200892135,
    "duration" : 80
  },
  "description" : "\n    连接名称校验\n    :return:\n    数据源：pg\n    用例一：\n    1、数据源连接下，不设置任何高危\n    2、普通用户执行（insert,updata,delete,creat_table），不报高危提示。（前提：此用户有这么命令的权限）\n    用例二：\n    1、自定义数据源连接-高危（insert,updata,delete,creat_table），并关闭高危复核方式\n    2、普通用户执行（insert,updata,delete,creat_table），报高危提示，但不报高危复核提示\n    用例三：\n    1、自定义数据源连接-高危（insert,updata,delete,creat_table），并开启高危复核方式\n    2、普通用户执行（insert,updata,delete,creat_table），报高危提示，也提示高危复核提示\n    3、此时此用户进行高危提权（insert,updata,delete,creat_table），断言可以执行通过\n\n    用例：\n    1、只自定义数据源连接-高危（insert）\n    2、普通用户执行insert报高危提示，但是执行：updata,delete,creat_table）不会报高危提示\n    ",
  "descriptionHtml" : "<pre><code>连接名称校验\n:return:\n数据源：pg\n用例一：\n1、数据源连接下，不设置任何高危\n2、普通用户执行（insert,updata,delete,creat_table），不报高危提示。（前提：此用户有这么命令的权限）\n用例二：\n1、自定义数据源连接-高危（insert,updata,delete,creat_table），并关闭高危复核方式\n2、普通用户执行（insert,updata,delete,creat_table），报高危提示，但不报高危复核提示\n用例三：\n1、自定义数据源连接-高危（insert,updata,delete,creat_table），并开启高危复核方式\n2、普通用户执行（insert,updata,delete,creat_table），报高危提示，也提示高危复核提示\n3、此时此用户进行高危提权（insert,updata,delete,creat_table），断言可以执行通过\n\n用例：\n1、只自定义数据源连接-高危（insert）\n2、普通用户执行insert报高危提示，但是执行：updata,delete,creat_table）不会报高危提示\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "TypeError: 'bool' object is not subscriptable",
  "statusTrace" : "def test_001_connection():\n        \"\"\"\n        连接名称校验\n        :return:\n        数据源：pg\n        用例一：\n        1、数据源连接下，不设置任何高危\n        2、普通用户执行（insert,updata,delete,creat_table），不报高危提示。（前提：此用户有这么命令的权限）\n        用例二：\n        1、自定义数据源连接-高危（insert,updata,delete,creat_table），并关闭高危复核方式\n        2、普通用户执行（insert,updata,delete,creat_table），报高危提示，但不报高危复核提示\n        用例三：\n        1、自定义数据源连接-高危（insert,updata,delete,creat_table），并开启高危复核方式\n        2、普通用户执行（insert,updata,delete,creat_table），报高危提示，也提示高危复核提示\n        3、此时此用户进行高危提权（insert,updata,delete,creat_table），断言可以执行通过\n    \n        用例：\n        1、只自定义数据源连接-高危（insert）\n        2、普通用户执行insert报高危提示，但是执行：updata,delete,creat_table）不会报高危提示\n        \"\"\"\n        _sql_list = list(pg_connection_sql.values())\n        # 清除环境，没有添加任何高危权限设置时，执行对应权限SQL语句，可以执行，不会有高危提示\n>       high_risk_resources.delete_all_high_risk_source_permission(_connection)\n\ntestcases\\高危命令\\pg\\test_001_connection_pg.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntins\\api\\db_manage\\access_set\\high_risk_resources.py:157: in delete_all_high_risk_source_permission\n    _permission_ids = db_manage_public.get_permission_ids(connection_name, _perm_type)\ntins\\api\\db_manage\\db_manage_public.py:104: in get_permission_ids\n    res = get_permission_info(connection_name, _perm_type)\ntins\\api\\db_manage\\db_manage_public.py:29: in get_permission_info\n    connection_id = get_connection_id(connection_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nconnection_name = 'xyz_test6666_PostgreSQL'\n\n    def get_connection_id(connection_name):\n        \"\"\"\n        通过连接名称获取connection_id\n        :param connection_name:\n        :return:\n        \"\"\"\n        _info = get_info()\n>       connection_id = jsonpath.jsonpath(_info, \"$.data.data[?(@.nodeName=='{}')].connectionId\".format(connection_name))[0]\nE       TypeError: 'bool' object is not subscriptable\n\ntins\\api\\public.py:317: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "\n    连接名称校验\n    :return:\n    数据源：pg\n    用例一：\n    1、数据源连接下，不设置任何高危\n    2、普通用户执行（insert,updata,delete,creat_table），不报高危提示。（前提：此用户有这么命令的权限）\n    用例二：\n    1、自定义数据源连接-高危（insert,updata,delete,creat_table），并关闭高危复核方式\n    2、普通用户执行（insert,updata,delete,creat_table），报高危提示，但不报高危复核提示\n    用例三：\n    1、自定义数据源连接-高危（insert,updata,delete,creat_table），并开启高危复核方式\n    2、普通用户执行（insert,updata,delete,creat_table），报高危提示，也提示高危复核提示\n    3、此时此用户进行高危提权（insert,updata,delete,creat_table），断言可以执行通过\n\n    用例：\n    1、只自定义数据源连接-高危（insert）\n    2、普通用户执行insert报高危提示，但是执行：updata,delete,creat_table）不会报高危提示\n    ",
    "status" : "broken",
    "statusMessage" : "TypeError: 'bool' object is not subscriptable",
    "statusTrace" : "def test_001_connection():\n        \"\"\"\n        连接名称校验\n        :return:\n        数据源：pg\n        用例一：\n        1、数据源连接下，不设置任何高危\n        2、普通用户执行（insert,updata,delete,creat_table），不报高危提示。（前提：此用户有这么命令的权限）\n        用例二：\n        1、自定义数据源连接-高危（insert,updata,delete,creat_table），并关闭高危复核方式\n        2、普通用户执行（insert,updata,delete,creat_table），报高危提示，但不报高危复核提示\n        用例三：\n        1、自定义数据源连接-高危（insert,updata,delete,creat_table），并开启高危复核方式\n        2、普通用户执行（insert,updata,delete,creat_table），报高危提示，也提示高危复核提示\n        3、此时此用户进行高危提权（insert,updata,delete,creat_table），断言可以执行通过\n    \n        用例：\n        1、只自定义数据源连接-高危（insert）\n        2、普通用户执行insert报高危提示，但是执行：updata,delete,creat_table）不会报高危提示\n        \"\"\"\n        _sql_list = list(pg_connection_sql.values())\n        # 清除环境，没有添加任何高危权限设置时，执行对应权限SQL语句，可以执行，不会有高危提示\n>       high_risk_resources.delete_all_high_risk_source_permission(_connection)\n\ntestcases\\高危命令\\pg\\test_001_connection_pg.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntins\\api\\db_manage\\access_set\\high_risk_resources.py:157: in delete_all_high_risk_source_permission\n    _permission_ids = db_manage_public.get_permission_ids(connection_name, _perm_type)\ntins\\api\\db_manage\\db_manage_public.py:104: in get_permission_ids\n    res = get_permission_info(connection_name, _perm_type)\ntins\\api\\db_manage\\db_manage_public.py:29: in get_permission_info\n    connection_id = get_connection_id(connection_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nconnection_name = 'xyz_test6666_PostgreSQL'\n\n    def get_connection_id(connection_name):\n        \"\"\"\n        通过连接名称获取connection_id\n        :param connection_name:\n        :return:\n        \"\"\"\n        _info = get_info()\n>       connection_id = jsonpath.jsonpath(_info, \"$.data.data[?(@.nodeName=='{}')].connectionId\".format(connection_name))[0]\nE       TypeError: 'bool' object is not subscriptable\n\ntins\\api\\public.py:317: TypeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "479cd3533edfa3e",
      "name" : "log",
      "source" : "479cd3533edfa3e.txt",
      "type" : "text/plain",
      "size" : 907
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "testcases.高危命令.pg"
  }, {
    "name" : "suite",
    "value" : "test_001_connection_pg"
  }, {
    "name" : "host",
    "value" : "LAPTOP-BQ91TRPV"
  }, {
    "name" : "thread",
    "value" : "27328-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcases.高危命令.pg.test_001_connection_pg"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "3e70802070192f32.json",
  "parameterValues" : [ ]
}